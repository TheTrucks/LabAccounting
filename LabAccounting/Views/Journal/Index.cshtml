@{
    ViewBag.TitlePage = "Журнал учета реактивов";
}

@Scripts.Render("~/bundles/datepicker")
@Scripts.Render("~/bundles/main_page")
@Styles.Render("~/Content/mainpage");

<div id="load" style="position: absolute; left: 0; top: 0; height: 100%; width: 100%; z-index: 9876; background-color: rgb(200,200,200); opacity: 0.45;">
    <div class="pageloader"></div>
</div>

<div class="row display-flex">
    <div class="col-sm-2" style="align-self: flex-end;">
        <a class="btn btn-primary" data-toggle="modal" data-target="#SampleAdd">
            <span class="glyphicon glyphicon-plus"></span>
            Добавить реагент
        </a>
    </div>
    <div class="col-sm-6 col-sm-offset-1">
        <h2 class="center-block text-center">Журнал реагентов</h2>
    </div>
    <div class="col-sm-3">

    </div>
</div>
<table class="table table-hover table-striped table-condensed" id="SampleTable">
    <thead>
        <tr>
            <th><b>Дата поступления</b></th>
            <th><b>Номер партии</b></th>
            <th><b>Наименование</b></th>
            <th><b>Категория</b></th>
            <th><b>Агр. сост.</b></th>
            <th><b>Класс</b></th>
            <th><b>Прекурсор</b></th>
            <th><b>Поставщик</b></th>
            <th><b>Срок годности</b></th>
        </tr>
    </thead>
    <tbody>
        <tr data-page="@Html.Raw(ViewBag.Page)" id="DataLoadTop" class="lineload @(ViewBag.Page < 2 ? "hidden" : "")">
            <td colspan="9" class="text-center">Загрузить данные</td>
        </tr>
        <tr data-page="@Html.Raw(ViewBag.Page)" id="DataLoadBot" class="lineload">
            <td colspan="9" class="text-center">Загрузить данные</td>
        </tr>
    </tbody>
</table>

<div id="SampleAdd" class="modal" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-wide">
        <div class="modal-content">
            <div class="modal-body" id="SampleAddBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Отменить</button>
                <button type="button" id="SampleAddSave" class="btn btn-primary">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<script>
    var Fetching = new Boolean(false);
    var SampleAddPageLoader = null;
    var TemplateLoader = null;
    var NameMenu = null;
    var Templates = [];
    var ClassList = {};
    var UnitList = {};
    var PickersList = [];
    var Validator = null;

    $(document).ready(function () {
        GetNewPage("down", true);
        $("#DataLoadTop").click(function () { GetNewPage("up", false); });
        $("#DataLoadBot").click(function () { GetNewPage("down", false); });

        $("#SampleAdd").on("show.bs.modal", function (modal_elem) {
            var MBody = $("#SampleAddBody");
            $(MBody).html(
                $("<div>")
                    .addClass("center-block")
                    .addClass("dummy-pageloader")
                    .append(
                        $("<div>")
                            .addClass("pageloader")
                            .css("font-size", "10px"))
            );
            GetSampleAddPage(MBody);
        });
        $("#SampleAdd").on("hide.bs.modal", function (modal_elem) {
            ClearModal(modal_elem.target, true);
            if (SampleAddPageLoader != null)
                SampleAddPageLoader.abort("Cancelling modal");
        });
    });

    function GetSampleAddPage(element) {
        SampleAddPageLoader = $.ajax({
            url: "@Url.Action("MetaData", "Journal")",
            method: "POST"
            })
            .done(function (data) {
                $(element).html(data);
                GetNameTemplates();
                Validator = new FormValidator(element);
                ApplyModalBindings();
                CreatePickers();
                UpdateMetaData();
            })
                .fail(function (e) { console.log(e); }) // todo change temprorary output
                .always(function () { SampleAddPageLoader = null; });
    }

    function CreatePickers() {
        var ElemBody = $("#SampleAddBody");
        var AllPickers = ElemBody.find(".datepicker");
        AllPickers.each(function (ind) {
            PickersList.push(new Litepicker({
                element: AllPickers[ind],
                lang: "ru-RU",
                format: "DD.MM.YYYY",
                autoRefresh: true
            }));
        });
    }

    function UpdateMetaData() {
        UnitList = JSON.parse($("#Units").val());
        ClassList = JSON.parse($("#Classes").val());
    }

    function ApplyModalBindings() {
        var NameInput = $("#SampleAddName");
        NameMenu = new AutofillMenu(NameMenuClick, function (inp) { return (obj) => obj.name.startsWith(inp) });
        NameInput.on("keyup", function (event) { NameMenu.Draw(event); });
        NameInput.on("click", function (event) { NameMenu.Draw(event); });
        $('body').on('click', function (event) {
            if (event.target != NameInput[0]) {
                NameMenu.RemoveMenu();
            }
        });
        // todo binding on select class change (for "custom" variant)
        $("#SampleAddSave").on("click", function () { SaveNewSample(); })
        // todo binding on cancel button (cancelling confirmation)
    }

    function ClearModal(modal_elem, triggered) {
        if (!triggered) {
            $(modal_elem).modal("hide");
        }
        $(modal_elem).find("div.modal-body").children().remove();
        PickersList.forEach(picker => picker.destroy());
        PickersList = [];

        Validator = null;

        $('body').off("click");
        if (NameMenu != null) {
            NameMenu.RemoveMenu();
            NameMenu = null;
        }
    }

    function NameMenuClick(element) {
        if ($(element).attr("data-type") != "-1") {
            var TmpTemplate = Template.FromElement(element);
            $("#SampleAddClass").val(TmpTemplate.type);
            $("#SampleAddName").val(TmpTemplate.name);
            if (TmpTemplate.precursor == true) { $("#SampleAddPrecursor").prop("checked", "true"); }
            $("#SampleAddDefUnit").val(TmpTemplate.defunit);
            $("#SampleAddStdInfo").val(TmpTemplate.stdinfo);
            $("#SampleAddStdNum").val(TmpTemplate.stdnumber);
        }
    }

    function GetNameTemplates() {
        TemplateLoader = $.ajax({
                url: "@Url.Action("GetTemplatesJson", "Journal")",
                type: "POST",
                dataType: "json"
        })
            .done(function (data) {
                if (data.length > 0) {
                    Templates = Template.FromJsonArray(JSON.parse(data));
                    if (NameMenu != null) { NameMenu.SetTemplates(Templates); }
                }
            })
            .fail(function (data) { console.log(data); }) // todo change temprorary output
            .always(function () { TemplateLoader = null; });
    }
    function SaveNewNameTemplate() {
        var newTemp = Template.FromInputs($("#SampleAddBody"), "SampleAddClass", "SampleAddName", "SampleAddPrecursor", "SampleAddDefUnit", "SampleAddStdInfo", "SampleAddStdNum");
        $.ajax({
            url: "@Url.Action("SaveTemplate", "Journal")",
            type: "POST",
            data: newTemp.GetJson(),
            dataType: "json",
            contentType: "application/json; charset=utf-8"
        })
            .done(function (data) { /* todo show error if data.status != 200 */ })
            .fail(function (data) { /* todo show error */ });
    }

    function GetNewPage(direction, initial, reload) {
        if (Fetching == false) {
            Fetching = true;
            var Scroller = direction == "down" ? $("#DataLoadBot") : $("#DataLoadTop");
            LineLoad(Scroller);
            var Page = Number($(Scroller).data("page"));
            if (reload == true) {
                reload = {
                    up: $("#DataLoadTop"),
                    down: $("#DataLoadBot")
                };
            }
            $.ajax({
                url: "@Url.Action("GetSampleListJson", "Journal")",
                data: JSON.stringify({ page: Page, order: "" }),
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8"
            })
                .done(function (data) { AddEntries(JSON.parse(data), Scroller, Page, direction, reload); })
                .fail(function (data) { console.log(data); }) // todo change temprorary output
                .always(function () {
                    Fetching = false;
                    if (initial == true) { $("#load").remove(); $("body").css("pointer-events", ""); }
                    LineLoadEnd(Scroller);
                });
        }
    }
    //$(datad).html((window.innerHeight + window.pageYOffset) + "\\" + document.body.scrollHeight);
    function AddEntries(jsonData, element, page, direction, reload) {
        if (jsonData.length > 0) {
            if (reload) {
                $(reload.up).data("page", 1);
                $(reload.up).addClass("hidden");
                $(reload.down).data("page", 1);
            }
            else if (direction == "down") {
                    $(element).data("page", page + 1);
            }
            else {
                    $(element).data("page", page - 1);
                if (page - 1 == 1) {
                    $(element).addClass("hidden");
                }
            }
        }
        var Items = [];
        for (var i = 0; i < jsonData.length; i++) {
            Items.push(FormEntryLine(jsonData[i]));
        }
        if (Items.length > 0) {
            direction == "down" ? $("#SampleTable > tbody:last-child").before(Items) : $("#SampleTable > tbody:first-child").after(Items);
        }
    }
    function FormEntryLine(json_data) {
        return $("<tr>")
            .append($("<td>").text(json_data.DateReceived))
            .append($("<td>").text(json_data.BatchNumber))
            .append($("<td>").text(json_data.Name))
            .append($("<td>").text(json_data.Category.Description))
            .append($("<td>").text(json_data.AggrState.Description))
            .append($("<td>").text(json_data.Class.ShortName))
            .append($("<td>")
                .append($("<span>").addClass(json_data.Precursor == true ? "glyphicon glyphicon-ok" : "glyphicon glyphicon-remove"))
            )
            .append($("<td>").text(json_data.Supplier))
            .append($("<td>").text(json_data.DateExpiration))
            .attr("data-id", json_data.Id)
    }

    function SaveNewSample() {
        if (Validator && Validator.validate() == true) {
            var TmpSample = SampleAddModel.FromInputs($("#SampleAddBody")); //todo check if succesful

            $.ajax({
                url: "@Url.Action("SaveSample", "Journal")",
                data: JSON.stringify(TmpSample),
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8"
            })
                .done(function (data) {
                    if (data && data.code == 200) {
                        SaveNewNameTemplate();
                        ClearModal($("#SampleAdd"));
                        GetNewPage("down", false, true);
                    }
                })
                .fail(function (data) { console.log(data); }) //todo better logging
        }
    }

    function LineLoad(element) {
        var Insert = $("<div>").addClass("lds-ellipsis").append($("<div>")).append($("<div>")).append($("<div>")).append($("<div>"));
        $(element).children().html("");
        $(element).children().append(Insert);
    }

    function LineLoadEnd(element) {
        $(element).children().html("Загрузить данные");
    }

    function SampleAddModel() {
        this.Category = -1;
        this.AggrState = -1;
        this.Name = "";
        this.Precursor = false;
        this.Class = -1;
        this.DefUnit = -1;
        this.StdNum = "";
        this.StdInfo = "";
        this.Quantity = -1;
        this.Comment = "";
        this.Supplier = "";
        this.Waybill = "";
        this.WaybillDate = "";
        this.Batch = "";
        this.ReceivedDate = "";
        this.CreatedDate = "";
        this.ExpirationDate = "";
    }
    SampleAddModel.FromInputs = function (modal_body) {
        var Result = new SampleAddModel();
        Result.Category = $(modal_body).find("input[name='optCategories']:checked").val();
        Result.AggrState = $(modal_body).find("input[name='optAggrs']:checked").val();
        Result.Name = $(modal_body).find("#SampleAddName").val();
        Result.Precursor = $(modal_body).find("#SampleAddPrecursor").prop("checked");
        Result.Class = $(modal_body).find("#SampleAddClass").val();
        Result.DefUnit = $(modal_body).find("#SampleAddDefUnit").val();
        Result.StdNum = $(modal_body).find("#SampleAddStdNum").val();
        Result.StdInfo = $(modal_body).find("#SampleAddStdInfo").val();
        Result.Quantity = $(modal_body).find("#SampleAddQuantity").val();
        Result.Comment = $(modal_body).find("#SampleAddComment").val();
        Result.Supplier = $(modal_body).find("#SampleAddSupplier").val();
        Result.Waybill = $(modal_body).find("#SampleAddWaybill").val();
        Result.WaybillDate = $(modal_body).find("#SampleAddWaybillDate").val();
        Result.Batch = $(modal_body).find("#SampleAddBatchNumber").val();
        Result.ReceivedDate = $(modal_body).find("#SampleAddDateReceived").val();
        Result.CreatedDate = $(modal_body).find("#SampleAddDateCreated").val();
        Result.ExpirationDate = $(modal_body).find("#SampleAddDateExpiration").val();
        return Result;
    }
    // todo break script section into files
</script>